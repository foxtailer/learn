import asyncio
from util import delay


async def main():
    task = asyncio.create_task(delay(10))
    try:
        # asyncio.shield —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–Ω—è—Ç–∏–µ —Å–æ–ø—Ä–æ–≥—Ä–∞–º–º—ã, 
        # —Å–Ω–∞–±–∂–∞—è –µ–µ ¬´—â–∏—Ç–æ–º¬ª, –ø–æ–∑–≤–æ–ª—è—é—â–∏–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–Ω—è—Ç–∏–µ.
        result = await asyncio.wait_for(asyncio.shield(task), 5)
        print(result)
    except TimeoutError:
        print("–ó–∞–¥–∞—á–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª–µ–µ 5 —Å, —Å–∫–æ—Ä–æ –æ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!")
        await delay(3)
        result = await task  # The coroutine pauses, yielding control to the event loop.
        print(result)


asyncio.run(main())

'''
await asyncio.wait_for(delay(2), timeout=1)
You are passing a coroutine, not a task.
So what does wait_for() do with that coroutine?

üîç Under the hood
asyncio.wait_for() sees you're passing a coroutine, so it automatically wraps it into a Task:

inner_task = asyncio.create_task(delay(2))
That task is internal to wait_for() ‚Äî you didn‚Äôt create it yourself, so you don‚Äôt have a reference 
to it. That‚Äôs why we call it an inner task ‚Äî it's a hidden, temporary task that wait_for() controls.

So when a timeout happens, wait_for() cancels that internal task ‚Äî but you can‚Äôt check its status, 
because you don‚Äôt have access to it.
'''