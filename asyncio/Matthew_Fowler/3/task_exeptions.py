import asyncio

async def boom():
    print("üîß –ó–∞–¥–∞—á–∞ boom –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—É")
    await asyncio.sleep(1)
    raise Exception("üí• –û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∑–∞–¥–∞—á–∏ boom!")

# ‚úÖ –°–ø–æ—Å–æ–± 1: –ñ–¥–∞—Ç—å —á–µ—Ä–µ–∑ await ‚Äî –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≤–∏—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ
async def handle_with_await():
    try:
        await boom()
    except Exception as e:
        print(f"[await] –ü–æ–π–º–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

# ‚úÖ –°–ø–æ—Å–æ–± 2: create_task + await
async def handle_with_task_and_await():
    task = asyncio.create_task(boom())
    try:
        await task
    except Exception as e:
        print(f"[task + await] –ü–æ–π–º–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ task: {e}")

# ‚úÖ –°–ø–æ—Å–æ–± 3: create_task + .add_done_callback
def handle_exception_callback(task: asyncio.Task):
    if task.exception():
        print(f"[callback] –ü–æ–π–º–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ callback: {task.exception()}")

async def handle_with_callback():
    task = asyncio.create_task(boom())
    task.add_done_callback(handle_exception_callback)
    await asyncio.sleep(2)  # –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏

# ‚ùå –°–ø–æ—Å–æ–± 4: –ó–∞–ø—É—Å–∫–∞–µ–º create_task –∏ –ù–ò–ß–ï–ì–û –Ω–µ –¥–µ–ª–∞–µ–º
async def fire_and_forget(): 
    asyncio.create_task(boom())
    await asyncio.sleep(2)  # –∂–¥–µ–º, –Ω–æ –Ω–µ –ª–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

# üëá –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –ø–æ –æ—á–µ—Ä–µ–¥–∏
async def main():
    print("\n--- 1. await ---")
    await handle_with_await()

    print("\n--- 2. task + await ---")
    await handle_with_task_and_await()

    print("\n--- 3. task + callback ---")
    await handle_with_callback()

    print("\n--- 4. create_task (–ù–ï –õ–û–í–ò–ú!) ---")
    await fire_and_forget()  # –¢—É—Ç —É–≤–∏–¥–∏–º WARNING

asyncio.run(main())
